/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;
import com.mycompany.studentmanagementsystem.DBcon;
import java.awt.Color;
import java.sql.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import javax.swing.JOptionPane;
import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author binit
 */
public class feeRecording extends javax.swing.JFrame {

        public final float fee=5000;
        private float due;
        DefaultTableModel tmodel=new DefaultTableModel();
       
    /**
     * Creates new form feeRecording
     */
    public feeRecording() {
        
        initComponents();
        btnhome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/home_black.png")));
        btnlogout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logout_black.png")));
        
        getAdmission();
        //cbadm.setSelectedIndex(-1);
         tmodel.setColumnCount(6);
         String[] titles={"Admission no","Name","month","fee","paid","due","fee_id"};
         tmodel.setColumnIdentifiers(titles);
         txtfee.setText(String.valueOf(fee));
         //setDueColumnRenderer();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtname = new javax.swing.JTextField();
        CBmnth = new javax.swing.JComboBox<>();
        txtfee = new javax.swing.JTextField();
        txtpaid = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblfees = new javax.swing.JTable();
        btnsave = new javax.swing.JButton();
        btnup = new javax.swing.JButton();
        btndlt = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        txtsrchad = new javax.swing.JTextField();
        btnsearch = new javax.swing.JButton();
        cbadm = new javax.swing.JComboBox<>();
        btnhome = new javax.swing.JButton();
        btnlogout = new javax.swing.JButton();
        btnclr = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setText("Student Class Fees");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Name");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Admission No");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Class Fee");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Paid Amount");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setText("Month");

        txtname.setEditable(false);

        CBmnth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));

        txtfee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtfeeActionPerformed(evt);
            }
        });

        txtpaid.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                txtpaidInputMethodTextChanged(evt);
            }
        });

        tblfees.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Admission_No", "Name", "Month", "Fee", "Paid", "Due", "Fee_ID"
            }
        ));
        tblfees.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblfeesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblfees);

        btnsave.setText("Save");
        btnsave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsaveActionPerformed(evt);
            }
        });

        btnup.setText("Update");
        btnup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnupActionPerformed(evt);
            }
        });

        btndlt.setText("Delete");
        btndlt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndltActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setText("Admission No");

        btnsearch.setText("Search");
        btnsearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsearchActionPerformed(evt);
            }
        });

        cbadm.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbadmItemStateChanged(evt);
            }
        });

        btnhome.setBackground(new java.awt.Color(242, 242, 242));
        btnhome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnhomeActionPerformed(evt);
            }
        });

        btnlogout.setBackground(new java.awt.Color(242, 242, 242));
        btnlogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnlogoutActionPerformed(evt);
            }
        });

        btnclr.setText("Clear");
        btnclr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnclrActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 1181, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(43, 43, 43)
                                .addComponent(cbadm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(43, 43, 43)
                                .addComponent(txtname, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(43, 43, 43)
                                .addComponent(CBmnth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(43, 43, 43)
                                .addComponent(txtfee, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(43, 43, 43)
                                .addComponent(txtpaid, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(btnsave)
                                .addGap(40, 40, 40)
                                .addComponent(btnup)
                                .addGap(38, 38, 38)
                                .addComponent(btndlt)
                                .addGap(38, 38, 38)
                                .addComponent(btnclr)))
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(90, 90, 90)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(txtsrchad, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(50, 50, 50)
                                .addComponent(btnsearch))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 614, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(btnhome, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1164, 1164, 1164)
                        .addComponent(btnlogout, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnhome, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnlogout, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(cbadm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(txtname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(CBmnth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(txtfee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(txtpaid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(68, 68, 68)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnsave)
                            .addComponent(btnup)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btndlt)
                                .addComponent(btnclr))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(txtsrchad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnsearch))
                        .addGap(17, 17, 17)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(106, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtfeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtfeeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtfeeActionPerformed

    private void btndltActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btndltActionPerformed
        int row=tblfees.getSelectedRow();   
        if(row==-1){
             JOptionPane.showMessageDialog(null, "Please select a record to delete.", "No Selection", JOptionPane.WARNING_MESSAGE);
        return;
    
       }
         //get fee_id  of the selected row
        
         int fee_id=(int)tblfees.getValueAt(row,6);
         
          int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete the record?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
          if (confirm != JOptionPane.YES_OPTION) {
             return; // Exit 
    }
           try{
              DBcon db = DBcon.getInstance();
            Connection con = db.getConnection();
                       
         
            //create statement object
            PreparedStatement prestat=con.prepareStatement("DELETE FROM fees WHERE fee_id=?");
            prestat.setInt(1, fee_id);
            int ret= prestat.executeUpdate();
            if(ret>0){
             JOptionPane.showMessageDialog(null, "Record deleted successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);  
              DefaultTableModel tmodel = (DefaultTableModel) tblfees.getModel();
              
              tmodel.removeRow(row);
            }
            else{
                JOptionPane.showMessageDialog(null, "Failed to delete the record.", "Error", JOptionPane.ERROR_MESSAGE);
        
            }
           }
           
            catch(SQLException ex){
            JOptionPane.showMessageDialog(null, "SQL error","error",JOptionPane.ERROR_MESSAGE);
        }
           
        catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Error Occured"+ex.toString(),"error",JOptionPane.ERROR_MESSAGE);
        }
           
          
           txtname.setText("");
           txtpaid.setText("");
           cbadm.setSelectedIndex(0);
           
        
    }//GEN-LAST:event_btndltActionPerformed

    private void btnsaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsaveActionPerformed
           //read teh inputs frm text boxes
           
   
                if(txtpaid.getText().isEmpty()||txtfee.getText().isEmpty()){
                    JOptionPane.showMessageDialog(null, "Enter values for empty field(s)", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                 
                }
                 
                
            try{
            int admission_no=Integer.parseInt(cbadm.getSelectedItem().toString());
           String name=txtname.getText();
           String month=CBmnth.getSelectedItem().toString();
           float fee=Float.parseFloat(txtfee.getText());
           float paid=Float.parseFloat(txtpaid.getText());
           if(paid>fee){
               JOptionPane.showMessageDialog(null,"Paid amount can't be greater than the class fee","error",JOptionPane.ERROR_MESSAGE);
               return;
           }
           else{
           //calculating due amount and displayng it
            due=fee-paid;
           }
      
           //txtdue.setText(String.valueOf(due));
          // due=Float.parseFloat(txtdue.getText());
           
           
           //saving to db

              DBcon db = DBcon.getInstance();
            Connection con = db.getConnection();
           
            PreparedStatement prestat1=con.prepareStatement("SELECT COUNT(*) FROM student WHERE admission_no=?");
            prestat1.setInt(1, admission_no);
            ResultSet rs=prestat1.executeQuery();
            
            if(rs.next()){
                int count=rs.getInt(1);
                
                  if (count > 0) {   //if admission number exists
                      
                      PreparedStatement prestat2=con.prepareStatement("SELECT COUNT(*) FROM fees WHERE admission_no = ? AND `month` = ?");
                      prestat2.setInt(1, admission_no);
                      prestat2.setString(2, month);
                      ResultSet rs2=prestat2.executeQuery();
                      
                        if(rs2.next()){
                            int result=rs2.getInt(1);
                            if(result==0){
                       
            
                        //prepared statement
                        PreparedStatement prestat=con.prepareStatement("INSERT INTO fees (admission_no, month, fee, paid, due) VALUES (?, ?, ?, ?, ?)", 
    PreparedStatement.RETURN_GENERATED_KEYS);
                        prestat.setInt(1, admission_no);
                        prestat.setString(2, month);
                        prestat.setFloat(3, fee);
                        prestat.setFloat(4, paid);
                        prestat.setFloat(5, due);

                        int result2=prestat.executeUpdate();
                        
                        int fee_id=0;
                        if(result2>0){
                          // Retrieve the generated keys (the fee_id)
                           ResultSet generatedKeys = prestat.getGeneratedKeys();
                        
                           if (generatedKeys.next()) {
                           fee_id = generatedKeys.getInt(1);  // Retrieve generated key
                           }
                           }
                                tmodel.addRow(new Object[]{admission_no,name,month,fee,paid,due,fee_id});

                                tblfees.setModel(tmodel);
                            }
                            else{
                                JOptionPane.showMessageDialog(null, "Duplicate record: Admission number and month already exist.", "Error", JOptionPane.ERROR_MESSAGE);
                                return;
                            }
                        }                              
                    }
                    else {
                        // Admission number does not exist
                        JOptionPane.showMessageDialog(null, "Admission number does not exist.", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }            
            }
                      

           }
        catch (SQLIntegrityConstraintViolationException ex) {
             JOptionPane.showMessageDialog(null, "Duplicate record: Admission number and month already exist.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        catch(SQLException ex){
            JOptionPane.showMessageDialog(null, "SQL error"+ex.toString(),"error",JOptionPane.ERROR_MESSAGE);
        }
        catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(null, "Enter a valid value","error",JOptionPane.ERROR_MESSAGE);
        }
          
        catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Error Occured"+ex.toString(),"error",JOptionPane.ERROR_MESSAGE);
        }
         
           txtname.setText("");
           txtpaid.setText("");
          
        
           
           
    }//GEN-LAST:event_btnsaveActionPerformed

    private void tblfeesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblfeesMouseClicked
            btnsave.setEnabled(false);
            int selectedRow = tblfees.getSelectedRow();
            if (selectedRow != -1) {
              Object feeIdValue = tblfees.getValueAt(selectedRow, 6);
            
            if (feeIdValue != null) { // Check if the value is not null
                int fee_id = Integer.parseInt(feeIdValue.toString()); 
                System.out.println("Fee ID: " + fee_id); 
           
           
         try{
              DBcon db = DBcon.getInstance();
            Connection con = db.getConnection();
           
            //create statement object
            PreparedStatement prestat=con.prepareStatement("SELECT fees.admission_no,fname,month,fee,paid,due FROM fees INNER JOIN student on student.admission_no=fees.admission_no WHERE fees.fee_id=?");
        
            prestat.setInt(1, fee_id);
            ResultSet rs=prestat.executeQuery();
            if(rs.next()){
                cbadm.setSelectedItem(String.valueOf(rs.getInt("admission_no")));
                txtname.setText(rs.getString("fname"));
                CBmnth.setSelectedItem(rs.getString("month"));
                txtfee.setText(String.valueOf(rs.getFloat("fee")));
                txtpaid.setText(String.valueOf(rs.getFloat("paid")));
                //txtdue.setText(String.valueOf(rs.getFloat("due")));
            }
         
           else {
                JOptionPane.showMessageDialog(this, 
                    "Fee ID is null. Please select a valid row.", 
                    "Error", JOptionPane.ERROR_MESSAGE);
            }
         
        
}
        
         
            catch(SQLException ex){
            JOptionPane.showMessageDialog(null, "SQL error","error",JOptionPane.ERROR_MESSAGE);
        }
         
        catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Error Occured"+ex.toString(),"error",JOptionPane.ERROR_MESSAGE);
        }
           

         
    
        
        
            }   
           
            }    
        
    }//GEN-LAST:event_tblfeesMouseClicked

    private void btnupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnupActionPerformed
            
                
                if(txtpaid.getText().isEmpty()||txtfee.getText().isEmpty()){
                    JOptionPane.showMessageDialog(null, "Enter values for empty field(s)", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
        try{ 
            int admission_no=Integer.parseInt(cbadm.getSelectedItem().toString());
           String name=txtname.getText();
           String month=CBmnth.getSelectedItem().toString();
           float fee=Float.parseFloat(txtfee.getText());
           float paid=Float.parseFloat(txtpaid.getText());
           if(paid>fee){
               JOptionPane.showMessageDialog(null,"paid amount is greater than the class fee","error",JOptionPane.ERROR_MESSAGE);
               return;
           }
           else{
           //calculating due amount and displayng it
            due=fee-paid;
           }
           
          
          // txtdue.setText(String.valueOf(due));
           //due=Float.parseFloat(txtdue.getText());
           
           
            int selectedRow = tblfees.getSelectedRow();
               int fee_id=0;
             if(selectedRow!=-1){
                       //get the admission number and mark_id frm the table row
                      
                       fee_id= Integer.parseInt(tblfees.getValueAt(selectedRow, 6).toString());
}

                      
            DBcon db = DBcon.getInstance();
            Connection con = db.getConnection();
           
            PreparedStatement prestat=con.prepareStatement("UPDATE fees SET admission_no=?,month=?,fee=?,paid=?,due=? where fee_id=?");
                    prestat.setInt(1, admission_no);
                    prestat.setString(2, month);
                    prestat.setFloat(3, fee);
                    prestat.setFloat(4, paid);
                    prestat.setFloat(5, due);
                    prestat.setInt(6, fee_id);
                    
                    prestat.executeUpdate();
                    
                     // Update the JTable row values
                    tmodel.setValueAt(admission_no, selectedRow, 0);
                    tmodel.setValueAt(name, selectedRow, 1); 
                    tmodel.setValueAt(month, selectedRow, 2);
                    tmodel.setValueAt(fee, selectedRow, 3);
                    tmodel.setValueAt(paid, selectedRow, 4);
                    tmodel.setValueAt(due, selectedRow, 5);
                    tmodel.setValueAt(fee_id, selectedRow, 6);

                    JOptionPane.showMessageDialog(null, "Record updated successfully", "Information", JOptionPane.INFORMATION_MESSAGE);
               
                    
                       //clear fieldzs
                      
                        
                        txtname.setText("");
                        txtpaid.setText("");
                        cbadm.setSelectedIndex(0);
                        
                     
                        //txtsrchad.setText("");
                        btnsave.setEnabled(true);
        
             
                    
                       }
           
             catch (SQLIntegrityConstraintViolationException ex) {
             JOptionPane.showMessageDialog(null, "Duplicate record: Admission number and month already exist.", "Error", JOptionPane.ERROR_MESSAGE);
        }
             catch(SQLException ex){
            JOptionPane.showMessageDialog(null, "SQL error"+ex.toString(),"error",JOptionPane.ERROR_MESSAGE);
        }
             catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(null, "Enter a valid number","error",JOptionPane.ERROR_MESSAGE);
        }
        
        catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Error Occured"+ex.toString(),"error",JOptionPane.ERROR_MESSAGE);
        }
         
          
                       
          
    }//GEN-LAST:event_btnupActionPerformed

    private void btnsearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsearchActionPerformed
                if(txtsrchad.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "Enter an admission number to search.", "Error", JOptionPane.ERROR_MESSAGE);
                 return;
            }
            try{
           
             int adm_no=Integer.parseInt(txtsrchad.getText());
    
             DBcon db = DBcon.getInstance();
            Connection con = db.getConnection();
           
            
         
// Create statement object
PreparedStatement prestat = con.prepareStatement(
    "SELECT fees.fee_id, fees.admission_no, fname, month, fee, paid, due FROM fees INNER JOIN student ON student.admission_no = fees.admission_no WHERE fees.admission_no = ? " +
    "ORDER BY CASE month " +
    "    WHEN 'January' THEN 1 WHEN 'February' THEN 2 WHEN 'March' THEN 3 " +
    "    WHEN 'April' THEN 4 WHEN 'May' THEN 5 WHEN 'June' THEN 6 " +
    "    WHEN 'July' THEN 7 WHEN 'August' THEN 8 WHEN 'September' THEN 9 " +
    "    WHEN 'October' THEN 10 WHEN 'November' THEN 11 WHEN 'December' THEN 12 " +
    "    ELSE 13 " +
    "END",
    PreparedStatement.RETURN_GENERATED_KEYS
);

    
            prestat.setInt(1, adm_no);
            ResultSet rs=prestat.executeQuery();
            
            //check if result set is not empty
             if (!rs.isBeforeFirst()) {
            JOptionPane.showMessageDialog(null, "No record found for admission number: " + adm_no, "Information", JOptionPane.INFORMATION_MESSAGE);
            return;         // Exit the method if no records are found
        }
            
           
//          
                    // Clear existing rows in the table model
                    tmodel.setRowCount(0);

                while(rs.next()){
                 Object records[]=new Object[7];
                 
                 records[0]=rs.getInt("admission_no");
                 records[1]=rs.getString("fname");
                 records[2]=rs.getString("month");
                 records[3]=rs.getFloat("fee");
                 records[4]=rs.getFloat("paid");
                 records[5]=rs.getFloat("due");
                 records[6]=rs.getInt("fee_id");
               
           
                 
//                 DefaultTableModel tmodel=new DefaultTableModel();
                 tmodel.addRow(records);
                 
             }
                tblfees.setModel(tmodel);
            
            }
            
            catch(SQLException ex){
            JOptionPane.showMessageDialog(null, "SQL error","error",JOptionPane.ERROR_MESSAGE);
        }
             catch(NumberFormatException ex){
                 JOptionPane.showMessageDialog(null, "Enter a valid number","error",JOptionPane.ERROR_MESSAGE);
            }
            
        catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Error Occured"+ex.toString(),"error",JOptionPane.ERROR_MESSAGE);
        }
                                           
    }//GEN-LAST:event_btnsearchActionPerformed

    private void txtpaidInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_txtpaidInputMethodTextChanged
        // TODO add your handling code here:
//        float fee=Float.parseFloat(txtfee.getText());
//           float paid=Float.parseFloat(txtpaid.getText());
//           //calculating due amount and displayng it
//           float due=fee-paid;
//        txtdue.setText(String.valueOf(due));
    }//GEN-LAST:event_txtpaidInputMethodTextChanged

    private void cbadmItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbadmItemStateChanged
            getNames();
    }//GEN-LAST:event_cbadmItemStateChanged

    private void btnlogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnlogoutActionPerformed
        loginPage logout=new loginPage();
        logout.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnlogoutActionPerformed

    private void btnhomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnhomeActionPerformed
      Home_Admin hme=new Home_Admin();
      hme.setVisible(true);
      this.setVisible(false);
    }//GEN-LAST:event_btnhomeActionPerformed

    private void btnclrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnclrActionPerformed
      txtname.setText("");
      txtpaid.setText("");
      txtfee.setText("");
      cbadm.setSelectedIndex(0);
      CBmnth.setSelectedIndex(0);
    }//GEN-LAST:event_btnclrActionPerformed
    private void getNames(){
        int admission_no=0;
    
          try{           
            if(cbadm.getSelectedIndex()>0){
               admission_no=Integer.parseInt(cbadm.getSelectedItem().toString());         
            }
             DBcon db = DBcon.getInstance();
            Connection con = db.getConnection();
           
            PreparedStatement prestat=con.prepareStatement("SELECT fname FROM student WHERE admission_no=?");
            prestat.setInt(1, admission_no);
            ResultSet rs=prestat.executeQuery();
            
            while(rs.next()){
                txtname.setText(rs.getString("fname"));
            }
            
          }
          
              
            catch(SQLException ex){
            JOptionPane.showMessageDialog(null, "SQL error"+ex.toString(),"error",JOptionPane.ERROR_MESSAGE);
        }
             catch(NumberFormatException ex){
                 JOptionPane.showMessageDialog(null, "Enter a valid number","error",JOptionPane.ERROR_MESSAGE);
            }
          
        catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Error Occured"+ex.toString(),"error",JOptionPane.ERROR_MESSAGE);
        }
                  
            
            
    }
    private void getAdmission(){
          try{           
           
             DBcon db = DBcon.getInstance();
            Connection con = db.getConnection();
           
            Statement stat=con.createStatement();
            
            ResultSet rs=stat.executeQuery("SELECT admission_no FROM student order by admission_no");
               cbadm.removeAllItems();
               cbadm.addItem("Select an admission no");
            while(rs.next()){
                cbadm.addItem(String.valueOf(rs.getInt("admission_no")));
            }
            
        }
          
           
            catch(SQLException ex){
            JOptionPane.showMessageDialog(null, "SQL error"+ex.toString(),"error",JOptionPane.ERROR_MESSAGE);
        }
            catch(NumberFormatException ex){
                 JOptionPane.showMessageDialog(null, "Enter a valid number","error",JOptionPane.ERROR_MESSAGE);
                 
        }
          
        catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Error Occured"+ex.toString(),"error",JOptionPane.ERROR_MESSAGE);
        }
    }
//    private void setDueColumnRenderer() {
//     DefaultTableCellRenderer redTextRenderer = new DefaultTableCellRenderer() {
//        @Override
//        public void setValue(Object value) {
//            super.setValue(value);
//            
//                float due = Float.parseFloat(value.toString());
//                if (due > 0) {
//                    setForeground(Color.RED);
//                } else {
//                    setForeground(Color.BLACK); 
//                }
//            }
//        
//    };
//    tblfees.getColumnModel().getColumn(5).setCellRenderer(redTextRenderer); 
//}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(feeRecording.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(feeRecording.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(feeRecording.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(feeRecording.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new feeRecording().setVisible(true);
            }
        });
    }
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> CBmnth;
    private javax.swing.JButton btnclr;
    private javax.swing.JButton btndlt;
    private javax.swing.JButton btnhome;
    private javax.swing.JButton btnlogout;
    private javax.swing.JButton btnsave;
    private javax.swing.JButton btnsearch;
    private javax.swing.JButton btnup;
    private javax.swing.JComboBox<String> cbadm;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable tblfees;
    private javax.swing.JTextField txtfee;
    private javax.swing.JTextField txtname;
    private javax.swing.JTextField txtpaid;
    private javax.swing.JTextField txtsrchad;
    // End of variables declaration//GEN-END:variables
}
